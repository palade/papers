{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf230
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset128 HiraKakuProN-W3;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 Self-managed and fine grained SLA guarantee in the cloud\
\
Problems list:\
1) no consider relationship amongst different attributes, and services\
no relationship consideration of attributes and service cause possible reactive to enforce SLA needs to be predefined. what parameter needs to consider can be defined e.g. bandwidth, CPU but what action needs to perform should be avoid.\
\
2) no consider business reason towards such attributes\
\
3) no consideration of consistency\
\
4) no prediction, thus how much resource we need to increase? Notice when add/remove resource we still consider the granularity of per application since it is really difficult to ensure such resource are used by certain services\
\
\
5) only focus driven on single/limited attribute, such as resource and performance\
\
6) not many to define on fine grained service, but rather see an application has a constant SLA
\f1 \'81\'43
\f0  thus not fine grained.\
\
7) most approach suffer look backward issue - based on past environmental condition to cnofig new interval, expecting the same violation does not occur. May consequently result in too many re-condifg over time. \
\
8) solutions for MOO may lack of consideration of distributed architecture while other solution suffer issue 7).\
\
Helpful techniques from literature:\
use of  Exponentially Weighted Moving Average (EWMA)  therefore to avoid occasionally peak in a very short period of time.\
\
0596173, ccgrid, ec2price and CIT2009 could be helpful for question 4)\
\
AutonomicSLA-Cloud could be helpful to determine monitor interval\
\
HPCS - IWCMC Vincent, Compsac 2010 I. Brandic and Emeakaroha_CloudComp2010 could be useful for overall architecture of self managing SLA\
\
HPCS - IWCMC Vincent can also benefits to transfer SLA parameter to monetary cost\
\
ccgrid could be useful to adapt a coefficient strategy for load balancing. This may be useful when considering which node to perform resizing\
\
Cloud11_Autoscaling provide good prediction model autoregressive moving average method (ARMA) can be used for predict workload. 6119065 also use queue theory to predict latency.\
\
iwcs, 6119065 can be used for multi-objective optimisation problem.\
\
service demand law may be helpful for determine resource used per service, this is mentioned in ICPE11_MAQPRO which also can be useful for MVA\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\fs30 \cf0 Potential theory involved (each subject to minor modifications):\
\
relations of attribute: (for fitness function)
\fs24 \
 Mean Value Analysis, queue theory,  \uc0\u8234 Birth\'96death process\uc0\u8236 , Erlang
\fs38 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f1\fs24 \cf0 \

\f0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\fs30 \cf0 Finding optimal config of services and attributes:
\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\fs26 \cf0 Multi-objective optimization (popular)
\f1 \'81\'43
\f0  genetic algorithm
\fs24 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\fs30 \cf0 resource efficiency:
\fs24 \
supply demand theory, partial equilibrium \
\

\fs30 Adaptive systems:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\fs24 \cf0 adaptive MAPE loop, MPC, CBR, prediction theory,\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\fs30 \cf0 Managing SLA in cloud:
\fs24 \
Heuristics-base:\
Market based theory, CBR, queue theory\
\
Control-theoretic:\
control theory\
\
\
\
\
\
\
(fine grande service could be helpful to determine what is the consumer really demand)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\fs28 \cf0 Current though:
\fs24 \
\
predict or not or hybrid? estimate != predict\
\
1. (application of queuing theory to model consistency queue) can used a list of global workload time interval e.g. a day or a year for each region queue.  also record occurrence of whole region and percentage of occurrence of each related services. When adaption get the expected number of request to that region (using non-homogeneous poisson process) then make trade-off to make the SLA >= response time of mixture of consistency level of related service with number of expected - 1 (assume the request to A occur at last, worst case)\
\
1.1 if not predict, observe  queue size for each region and calculate the timeliness of observe last request for each services, if violate trigger GA  , still can apply Litter's law to adjust monitoring interval. Or a monitoring would be trigger by each request\
\
(or using simp weight average for global workload time interval for each service)\
\
\
2. trigger can be based on violation found or global monitoring time interval reach, on a predictable-manner even when the SLA parameters are actively changed.\
\
3. extend conflict region to have multiple CR within a service region , also has sessional region within each CR although those SCR should be consider the same. We specify what service should be consistent and translate to CDS in SSOR. of course it would have many CDS for a service in SCR. Each service region may have different components.\
\
4. category of SLA parameters (for each fine grained service)\
adjustable (each associate with cost for each party, only value that runtime adjustable, always controllable, usually ensure by provider)\
consistency level \
resource, no of VM (cpu memory etc), PM\
monetary price willing to pay\
\
monitor able (max capacity is form of (at least one) adjustable or other monitor able, may be probability, each with utility point per party)\
response time\
numbers of failure/invocation/service complete\
scalability\
elasticity\
accuracy\
throughput\
\
also have other factors not in SLA and usually uncontrollable\
workload\
time\
\
\
monitor able can capture relation amongst parameters, each adjustable may have a boundary region (e.g. consistency region, component region) that capture relation of a service to other serves then in the equation of mapping monitor able  to  adjustable, such boundary region may or may not be used.\
\
max capacity monitor able should always able to be mapped with adjustable \
\
\
\
adjustable and monitor able has 3 measurement function:\
1) measurement on state, e.g. response time (direct), throughput = number of complete service / t \
2) measurement of max on state (before adjustable element change, that is on current adjustable value state) e.g. throughput = % of service weight * max resource / com sue of serving request \
3) the bounds on SLA\
\
\
5. (partial equilibrium  should always focus on product type) if it is possible to determine how much adjustable parameter is demanded, then we can choosing the best fit type/spot using partial equilibrium of demand supply theory. 
\f1  
\f0  This fit the case where spot instance are used where price change based on supply demand.\
\
can use partial equilibrium for each spot instance type as each product. Seems like amazon does not allow scale up - purchase a type still charge the whole regardless if you fully using it. can consider fine grandee resource to prices per cpu/memory.\
\
\
price may change hourly but SLA enforcement may be trigger multiple times within a hours in which case the price does not change. then we may use 5.1
\f1 \
\

\f0 5.1. does not change the current instance type, only foucs on additional demand
\f1 , 
\f0 calculating the ratio of capacity (cpu/memory) can be also used to reduce the most suitable instance type (e.g. most expensive fits the ratio) when over supply
\f1 ,
\f0  also increase the most suitable type (e.g. cheapest and require less number of type) (the solution for if scale up or scale out could potentially be determined as well). When it can't add more on the VM it seeking to add more PM with suitable type \
}