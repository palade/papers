{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf230
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset128 HiraKakuProN-W3;\f2\fnil\fcharset134 STHeitiSC-Light;
}
{\colortbl;\red255\green255\blue255;\red154\green154\blue154;\red179\green179\blue179;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 Self-managed and fine grained SLA guarantee in the cloud\
adaptive fine grandee SLA  pareto optimisation and economic equilibrium enforcement\
\
Problems list:\
1) no consider relationship/interference amongst different attributes, and services\
no relationship consideration of attributes and service cause possible reactive to enforce SLA needs to be predefined. what parameter needs to consider can be defined e.g. bandwidth, CPU but what action needs to perform should be avoid.\
\
2) no consider business reason towards such attributes\
\
3) no consideration of consistency\
\
4) no prediction, thus how much resource we need to increase? Notice when add/remove resource we still consider the granularity of per application since it is really difficult to ensure such resource are used by certain services\
\
\
5) only focus driven on single/limited attribute, such as resource and performance\
\
6) not many to define on fine grained service, but rather see an application has a constant SLA
\f1 \'81\'43
\f0  thus not fine grained.\
\
7) most approach suffer look backward issue - based on past environmental condition to cnofig new interval, expecting the same violation does not occur. May consequently result in too many re-condifg over time. \
\
8) solutions for MOO may lack of consideration of distributed architecture while other solution suffer issue 7).\
\
9
\f1 \'81\'6a
\f0 market price fluctuations such as spot instance can result int SLA violation as they can not determine the demand. Consumers need to manually estimate their need, which is unrealistic, currently only based on bid price, which could not fully represent demand.\
\
10) in on-demand manner, the iaas SLA may not be need as no need to specify how much resource needed but how much willing to pay for. (exception would be reserve resource)\
\
11) no consideration of interference (such as static modeling of SLA), not intend to handle such interference but try to avoid it when modelling (such as those dynamic modelling papers)\
\
12) for resource allocation paper, usually do not consider user friendly SLA terms.\
\
ANN may be better for regression for long time prediction, however, regression is more efficient and accurate enough on short time period.\
\
Our approach consider both consumer (pareto optimal and minimum cost via change control value) and provider (maximum profit via change price)\
\
Helpful techniques from literature:\
use of  Exponentially Weighted Moving Average (EWMA)  therefore to avoid occasionally peak in a very short period of time.\
\
0596173, ccgrid, ec2price and CIT2009 could be helpful for question 4)\
\
AutonomicSLA-Cloud could be helpful to determine monitor interval\
\
HPCS - IWCMC Vincent, Compsac 2010 I. Brandic and Emeakaroha_CloudComp2010 could be useful for overall architecture of self managing SLA\
\
HPCS - IWCMC Vincent can also benefits to transfer SLA parameter to monetary cost\
\
ccgrid could be useful to adapt a coefficient strategy for load balancing. This may be useful when considering which node to perform resizing\
\
Cloud11_Autoscaling provide good prediction model autoregressive moving average method (ARMA) can be used for predict workload. 6119065 also use queue theory to predict latency.\
\
iwcs, 6119065 can be used for multi-objective optimisation problem.\
\
service demand law may be helpful for determine resource used per service, this is mentioned in ICPE11_MAQPRO which also can be useful for MVA\
\
various papers in dynamic modelling can be used for create dynamic model of relations. such as q-cloud.\
\
GECON10, TR10 can be useful to unifying resource such as cpu\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\fs30 \cf0 Potential theory involved (each subject to minor modifications):\
\
relations of attribute: (for fitness function)
\fs24 \
 Mean Value Analysis, queue theory,  \uc0\u8234 Birth\'96death process\uc0\u8236 , Erlang
\fs38 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f1\fs24 \cf0 \

\f0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\fs30 \cf0 Finding optimal config of services and attributes:
\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\fs26 \cf0 Multi-objective optimization (popular)
\f1 \'81\'43
\f0  genetic algorithm
\fs24 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\fs30 \cf0 resource efficiency:
\fs24 \
supply demand theory, partial equilibrium \
\

\fs30 Adaptive systems:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\fs24 \cf0 adaptive MAPE loop, MPC, CBR, prediction theory,\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\fs30 \cf0 Managing SLA in cloud:
\fs24 \
Heuristics-base:\
Market based theory, CBR, queue theory\
\
Control-theoretic:\
control theory\
\
\
\
\
\
\
(fine grande service could be helpful to determine what is the consumer really demand)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\fs28 \cf0 Current though:
\fs24 \
\
predict or not or hybrid? estimate != predict\
\
0. SLA model could be expose model that handles \{SLA-infrastrcutre, SLA-platform\} - (model) - SLA-software (to end user). It can be extended to form end to end SLA as well, but each type of user group (i.e. gold, silver) need to use different instance of service (2 different instance of service A)\
\
Pareto optimal fined grained SLA means for each service, it contains conflict objective such as least adj to achieve highest mon, most strict consistency to best performance etc.\
\
1. (application of queuing theory to model consistency queue) can used a list of global workload time interval e.g. a day or a year for each region queue.  also record occurrence of whole region and percentage of occurrence of each related services. When adaption get the expected number of request to that region (using non-homogeneous poisson process) then make trade-off to make the SLA >= response time of mixture of consistency level of related service with number of expected - 1 (assume the request to A occur at last, worst case)\
\
1.1 if not predict, observe  queue size for each region and calculate the timeliness of observe last request for each services, if violate trigger GA  , still can apply Litter's law to adjust monitoring interval. Or a monitoring would be trigger by each request\
\
(or using simp weight average for global workload time interval for each service)\
\
\
2. trigger can be based on violation found or global monitoring time interval reach, on a predictable-manner even when the SLA parameters are actively changed.\
\
3. We define component level region (for cpu memory) and service level region (CR and SCR for consistency), which are hierarchical. Each region may have different type such as CR, SCR. We specify what service should be consistent and translate to CDS in SSOR. of course it would have many CDS for a service in SCR. Each service region may have different components. We do not considering consistency between components, as it can not ensure what sequence a node see if it only being deployed one component.\
\
3.1 each service would have a set of interference services, if the adj value is not service level and not direct associate between services then the set would be likely to be the services within the same region. If like consistency then for each service, the set of interference services should be each consistency level between it and another service as well as a chain, s1 -2- s2 -3- s3 mean then s1 has 2 level with s2, s2 has 3 level with s3. Note that the permutation should not be duplicated.\
\
4. category of SLA parameters (for each fine grained service, the could cover any adaption strategy for SLA enforcement, i.e. admission control, resource allocation and task scheduling)\
\
we identify non-functional interference i.e. consistency and functional interference i.e. one service invoke another.\
\
we use hirerichical structure to describe service nested with each other, therefore an interference of a adj of parent service would contain all sub-services, and their SLA should put into the same MOO decision process. If such nested relation is on different component then the at least one service needs to be defined for each component so we can fine the real one that need to be scale up/down in/out.\
\
adjustable (could be vector)(each associate with cost for each party (cost needs to be normalised by compute % of compared paris, of course need to consider weight), only value that runtime adjustable, always controllable and can not be violated, usually ensure by provider, cost does not have to be fixed, we should always try to determine demand with minimum resource) also associate with interference boundary (services)\
\
only global adj need region and sequencer\
\
if the adj is constant value for each service in the interference region, then when apply to equation 2) it can be reduced to one rather than consider all service (i.e. number of replica in VM level)\
\
\
SLA as well but usually can not be violated)\
consistency level \
resource, no of VM (cpu memory etc), PM\
monetary price willing to pay\
no of invocation\
\
monitor able (max capacity is form of (at least one) adjustable or other monitor able (actually we can only consider association with adj as it cover influence to other mon of the same service as well as other from services (either adj or mon), since mon can be translated into adj anyway), may be probability, each with utility point per party
\f1 ,
\f0  also associate with a responsible party when violation cause by certain adjustable value (that is the cost party on adjustable value))\
service time\
response time\
accuracy\
throughput\
\
also have measure metric that usually not in SLA but cloud should ensure:\
scalability\
elasticity\
\
also have other factors not in SLA and usually exogenous  (this can associated with service or region as well, which can only be measured, we can use simple AR to predict this)\
workload\
time\
input size\
\
Note that an interference region contain all service in each region of an adj, each region of an adj consist of any service that interfered with a service in that region. Therefore interferences service of a service does not necessary to be all service in that adj region.\
\
monitor able can capture relation amongst parameters, each adjustable may have a boundary region (e.g. consistency region, component region) that capture relation of a service to other serves then in the equation of mapping monitor able  to  adjustable, such boundary region may or may not be used.\
\
Note that provider and com suer can both identify what service should be interfered for a adj value. For com suer, he should provide weight for each service it has, if for provider, the weight for services come from different consumers is define by the total profit = TR-TC of that consumer. \
there are different output of MOO for each region of weight linked services, regardless if they come from the same consumer. (therefore no of weight linked services determine number of MOO to be sorted. Only global adj need sub region for sequencer to reach global agreement)\
\
(it should be specified if is region level as it always associate with a region, also it need to specify if the adj value is global value i.e. consistency level, if not global then it can by adjusted in each PM. non global value can change on each node, if need to change global one then will effect all node, if such effect violate SLA then corresponding node needs to add in to solve MOO)\
\
after each PM determine there MOOs, for each global adj the final decision is carry out on the sequencer of adj region. We can apply GA again but the change value would be only that adj within the range of min - max for each interfered service, any mon that effect by such adj should be counted in as well. Selection should be applied the same rule as on each PM. 
\f1 (of course one more dimension on no of PM)
\f0 \
\
adjustable and monitor able has 3 measurement function:\
1) measurement on state, e.g. response time (direct), throughput = number of complete service / t (it usually specified by SLA)\
2) measurement of max on state (before adjustable element change, that is on current adjustable value state) e.g. throughput = number of request / sum of the  response time of each request (sec)\
(for adjustable this would be the assign ones)\
3) the bounds on SLA\
\
***************\
1) is not used in calculation. On under provision monitoring we only compare 1) and 3), 1) worse than 3) means violation then adjustment need;  On over provision monitoring we compare the adj of 1) and 2), if 1) < 2) then adjustment needed. (may be 1) can > 2) but as long as no mon's such that 1) < 3) then no adjustment needed) \
 2) is used when solve MOO, then can determine up/down, and adjust monitor able variable via adjustable variable depends on the equation. (as for how the mon change when adj change can be find out by linear dynamic model, so no need to define i.e y = 1/x) (the up and down can not be changed, i.e if there is need to reduce resource then resource should not be added, so it reduce over optimise a SLA (such as consistency))\
2) may be, can be predefined or learn online using MIMO (ARMA/ARIMA)?\
if 2) is region level metric, such as cpu, men then for each service it can be compute via 1) (mean % of cpu usage on service) in fact or auto-created model in 2) need measure value from 1) that is, region level adjustable value can be transferred to service level. \
***************\
\
There should be transfer function when using measure and adjustable in 2) . if they are not the same as service level or region level. i.e. the SMA of % of service cpu usage can be used to compute cpu usage of a service when new region cpu usage is given. If the adju value is between service, then transfer function is needed to define how to handle such value in 2) (if there the same as region that means no interference amongst services)\
\
mon value is also global or non global, when used in 2) transfer function is need, e.g. throughput of a node = SLA throughput/number of node.\
\
in order to do comparison and calculation any way, when SLA value, measured value via 1) and adj value used in 2) we need transfer function.\
\
note that cpu usage can use unify metric such as ECU to measure.\
\
5. (partial equilibrium  should always focus on product type) if it is possible to determine how much adjustable parameter is demanded, then we can choosing the best fit type/spot using partial equilibrium of demand supply theory. 
\f1  
\f0  This fit the case where spot instance are used where price change based on supply demand.\
\
Price determine can be based on different consumer (their services) in such case no negotiation is needed as the SLA would always satisfied and reach equilibrium for each consumer. Price should be based on each PM and the granularity of that adj (e.g. component for cpu, memory) as well.\
\
\
budget could be based on each PM, component and consumer as well as adj\
\
can use partial equilibrium for each spot instance type as each product. Seems like amazon does not allow scale up - purchase a type still charge the whole regardless if you fully using it. can consider fine grained resource to prices per cpu/memory.\cf2  (we can calculate demand/supply function dynamically - demand function Q = b - Pa, supply function Q = d + Pc, (to get b,a,d and c can use 
\fs38 \uc0\u8234 Linear least squares\uc0\u8236  
\fs24 (polynomial regression)) then\cf0  \cf2 it can be used MR = MC, MR = quantity times demand function
\f1 ,
\f0  therefore the demand resource would definitely being produce with a assumption of profit maximum) remember to consider case where there is no equilibrium point within the quantity range, then usually select the max of demand. \cf0 \
\
\cf2 for the first interval, the demand/supply function would be calculated by a set of the (budget of each region adj type)/ total quantity of that adj type in each interval. Then the subsequence interval can use the calculate equilibrium point price and the total number of adj value in each previous intervals. \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
\
When demand function is known we calculate price = P = (PED/(1+PED))*MC, PED = P/Q * dQ/dP. Then for each individual of MOO we set criteria: budget >= sum of each service of the calculate equilibrium price based on current amount of adj * amount of adj, in order to verify its feasiablity. \
we can calculate the demand function Q = b -Pa by using training data of final Q,P by each MOO interval end. \
\
one MOO can have more budget function as well if it cross different consumers.\
\
when apply demand/supply with MOO we may need finer grained price (instead of per hour, we may need per sec etc.)
\f1 \
 \

\f0 5.1. when under supply, calculating the ratio of capacity (cpu/memory, for the additional demand) can be also used to reduce the most suitable instance type (e.g. most expensive fits the ratio) when over supply
\f1 ,
\f0  also increase the most suitable type (e.g. cheapest and require less number of type) (the solution for if scale up or scale out could potentially be determined as well). When it can't add more on the VM it seeking to add more PM with suitable type. (all those output should be involve in the solution of MOO)\
\
assign resource to service as instance type, although the resource may not be fully used buy this is how the price is calculated. instance type can be scale up/down to another type\
\
6. with 2
\f1 nd 
\f0 order ARMAX and least squares algorithm, we can dynamically model relationship between monitroable value and adjustable value, giving mon(k) = a1mon(k-1) + a2mon(k) +  adj(k) +  adj(k-1) \cf2 + d(k-1) + d(k-2).\cf0 \
\
adj(k) = sigma An1*adjn1 (n = no of services for adj1) (k)+ sigma An2*adjn2 (n = no of services for adj1) (k) + \'85\'85. sigma Axc*adjxc (x = no of services for adjc within interference domain of target service) (k), c = no of adjustable value that associate with m Axc = row vector, adjxc = column vector\
(this can be either adj value or mon value)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf2 d(k) = sigma An1*dn1 (n = no of services for with in the region of associated adjustable values) (k)+ sigma An2*dn2 (k)  + \'85..sigma Axc*dxc (x = no of services for with in the region of associated adjustable values) (k), c = no of exogenous parameter such as workload. Axc = row vector, dxc = column vector\cf0 \
\
least squares algorithm can solve this by building partial derivation of S (sum of error) = 0, for solving each a1,a2,And the number of equals needed  = 2 + 2 sigma Ki (i=1,2 \'85 c) K = no of service for each interference domain of adjustable value for a service, i= no of different type of region for adjustable value\cf2  + 2 * exogenous parameters * no of all services involved (get rid of the redundant ones).\cf0  This is the minimum required number of measurement as well. (not duplicated monitoring)\
\
update the model and apply the model can be done on each interval k, but adj and mon needs to be normalised (such as use mean value or % of total), \cf3 or we can update model on each request, so may be better capture the case where violation and over provision occur (the AR worth be still using measure value from previous k-1 interval) and then only apply it on k invertval, normalisation is still needed. (this is experiment driven) \cf0 Adj value also needs to be normalised,  when req time decrease resource should be increase such that req = 1 / resource etc.\
\
for each interval k, if no request to a service but still it would be used for calculation but at k time step the coefficient would be 0.\
\
\
to decide wether use ARMA/ARIMA/ARMAX is a experiment driven task.\
\
upon SLA violation, this can seen as a trigger of interval k change, such as spike load or the up/down turing point on workload graphic.\
\
7. to make the model even more generic and flexible, one does not need to know which adj/mon value can influence mon value, it can be learn online via AIC and maximum likelihood method, as well as stepwise algorithm. (of course the sample time of finding the number of parameters would be longer than finding the coefficient)\
\
\
8. the main difference between ANN and ARMA is that ANN capture nonlinear relation. However, since the model is updated in very short epoch, therefore it is possible to capture local linear relations. ANN needs to determine no of nodes in hidden/input layer and no of hidden layer, as order in ARMA. They can be also dynamically defined via AIC. When apply ANN we apply the same as ARMA: relevant mon and adj values as input (including interference services), a mon as output. \
\
When use BP, there is need to compute MSE of all sample up to k interval, so that to decide if update the weight in k interval and the current model is always with min MSE.\
\
we apply AIC and stepwise/incremental selection on ANN we can assume 1/2 hidden layer (as 2nd order on ARMA), then only go through combination of input and hidden neurone \
\
\'93It has been mathematically proved that the single-hidden \
layer feed-forward networks are universal approximators \
that can learn any continuous functions with arbitrary \
accuracy\'94\
\
for training ANN we assume weight can be learn online therefore on each training interval we only need to determine no of input and no of neurone and activation function (no of layer is set to 1 or 2). whose value not less than the min AIC in the history. Therefore instead of finding the optimal model in one run, we only interesting in finding the best ever model and eventually reach to the best model.  (learning rate would be fixed, as we can have infinite samples)\
\
An incremental model selection could be applied, i.e. (start with full input) chose the number of neurone of a hidden layer that best than the best historical AIC (or just the best one if the target couldn't find ), then do it only the next layer, then reduce the input one by one. Note that the RSS should be base on the new model on the give interval (with the data in the buffer windows). Or we can consider all combination via backward approach.\
\
\
with predefined accuracy 
\f1 (the chance that SLA violation occur)
\f0 , we can even dynamically chose either ARMA or ANN.\
\
We could apply a buffer windows, so we won't running out of memory to store historic data. This is applicable since the old data can not represent current dynamics.\
\
9. In MOO the selection rule could be: (non dominated and crowd distance)/ assigned weight (if any)\
weight include: 1) amongst services from different consumers, 2) services from the same consumers 3) amongst different adj/mon value from the same service\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f2 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0 \cf0 when determine global value on sequencer, it may not have weight on each node, (we first ensure SLA are all meet) therefore would need to determine on the least sum degradation i.e. how much the mon are worse than local decision when apply certain global adj value, then pick up the smallest one. (if we use weight) or can simply use domination ranking. (of course need to reexamine any constraints that effected such as budget)\
\
when consensus on adj we can agree on different level of region concurrently, i.e no of PM and consistency \
\
Some adj from different MOO (or ven the same MOO) may needs to compete with each others (i.e. cpu/memory) when such competition occur we first satisfy the ones that have more profit, then looking to add more PM normally add 1, in this case we know how much resource needs thus add on the proper VM  otherwise from the cheapest one . (need to send to sequencer for determine) 
\f1 no action if node already decided to be added) (PM section could based on availability)\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f2 \cf0 when add new PM we may or may not know how much resource demand, if unknown we use the cheapest VM, the budget would be equally grained from the current PM who propose to add new one (or in ratio if how much is known). As during MOO this should be a constraint on each PM.\
\
at the end of each run of MOO needs to rebalance the remaining budget, based on the goal that every node should have equally free budget. The overall budget would not exceed the consumer anticipation.\
\
such distribution can be done in a decentralised way after each adj has been finally decided.
\f0 \
\
when we need remove PM, remove the ones that use least resource. and equally distribute the budget\
\
In MOO, the objective could be each SLO + min the cost, of each service we could sum up cost/mon of all adj value so that reduce the number of objective. for consistency only sum up the consistency that a target service needs to maintain when another service arrive first. Therefore assume each service has the same number of SLO, the complexity of objective is 2 * S \
\
We assume that even when SLA of mon has been satisfied, the consumer still wish to pay more in order to optimise the mon. Subject to budget\
\
10. as the economic road map suggests, IaaS, Paas is more likely to be monopolistic market while SaaS would be monopolistic competition.\
\
two reasons to make budget on each node 1) cost function of PM may be different 2) it allow local computation get rid of consensus of the same type of PM. as solve it centrally is the  same as solve it distributedlly. But the demand function of each node can better capture the true demand. \
\
\
Experiment driven:\
1) ARMA/ARIMA/ARMAX? (if include workload)\
2) if there is need to apply AR on workload?\
3) the way to forward/backward search on ANN model, if need to try every combination?\
4) if apply dynamically determine if use ANN or ARMA? or choose one only?\
\
for demonstrating problem we need to \
1) show benefit of fine grained\
2) in terms of interference between services we mean 1,the original approach consider only one service is broken as it is interfered 2,  change one control of a service may interfere another service.\
\
such interference could be conflict interference or concord interference\
\
we can use resource (concord) and use consistency (conflict) as example. We also need to show vertical and horizontal interference for both.\
\
3) show conflict objectives of one service, such that trade-off between performance, consistency and budget with consideration of 1) and 2).\
\
for accuracy experiment, can change the control value and measure the actual mon and the output mon of model. Or can only change workload etc, measure both mon and adj, then apply adj to model and compare the actual mon and output mon of model, in such case we can use 70% data to train and 30% to test. \
\
\
for MOO experiment, we first need to proof our approach can reduce SLA violation by comparing the   different SLO over the entire workload, scalability and elasticity can be evaluated here. Then we can apply general approach i.e. static to compare 
\f1 (those does not consider conflict, service inter fence and equilibrium) 
\f0 SLO, (if optimal), cost (if minimised) and profit (if maximised). example of comparison can see HPL-2008-123R1-mimo\
\
7423114222}